user root;

worker_processes  1;

# 进程限制，与ulimit -n的值保持一致
worker_rlimit_nofile 100001;

# grep ^processor /proc/cpuinfo | wc -l  设置CPU的核心，Nginx1.9之后自动配置了核心数
#worker_processes 2;
#worker_cpu_affinity 01 10
worker_cpu_affinity auto;

events {
    worker_connections  10240;
    multi_accept on;
    use epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format main '{"@timestamp":"$time_iso8601",'   
	'"host":"$server_addr",'
	'"clientip":"$remote_addr",'
	'"size":$body_bytes_sent,'
	'"responsetime":$request_time,'
	'"upstreamtime":"$upstream_response_time",'
	'"upstreamhost":"$upstream_addr",'
	'"http_host":"$host",'
	'"url":"$uri",'
	'"xff":"$http_x_forwarded_for",'
	'"referer":"$http_referer",'
	'"agent":"$http_user_agent",'
	'"status":"$status"}';
 
    # 开启高效文件传输模式
    sendfile        on;
    # 需要在sendfile开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量。将响应头和正文的开始部分一起发送，而不一个接一个的发送。
    tcp_nopush      on;
    tcp_nodelay     on;
    server_names_hash_bucket_size 128;
    server_names_hash_max_size 512;
    keepalive_timeout  65;
    client_header_timeout 15s;
    client_body_timeout 15s;
    send_timeout 60s;

    limit_conn_zone $binary_remote_addr zone=perip:10m;
	limit_conn_zone $server_name zone=perserver:10m;
	limit_conn perip 2;
	limit_conn perserver 20;
	limit_rate 300k;

    client_body_buffer_size 512k;
	client_header_buffer_size 4k;
	client_max_body_size 512k;
	large_client_header_buffers 2 8k;

    proxy_connect_timeout 120s;
	proxy_send_timeout 120s;
	proxy_read_timeout 120s;
	proxy_buffer_size 16k;
	proxy_buffers 4 64k;
	proxy_busy_buffers_size 128k;
	proxy_temp_file_write_size 128k;
	proxy_next_upstream http_502 http_504 http_404 error timeout invalid_header;

    # 表示开启压缩功能
    gzip on;
    # 表示允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩，建议设置成大于1K。如果小于1K可能会越压越大
    gzip_min_length  1k;
    # 压缩缓存区大小
    gzip_buffers     4 32k;
    # 压缩版本
    gzip_http_version 1.1;
    #vary header支持 
    gzip_vary on;
    #指定压缩的类型
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;
    gzip_disable "MSIE [1-6]\.";
    gzip_comp_level 6;

 
    server {
        listen       80;
        server_name  localhost;
        # rewrite ^(.*)$ https://$host$1 permanent;
        
		location / {
            root   /usr/share/nginx/html;
            # try_files $uri $uri/ /index.html last;
            index  index.html index.htm;
        }

		location ~ .*\.(eot|svg|ttf|woff|jpg|jpeg|gif|png|ico|cur|gz|svgz|mp4|ogg|ogv|webm) {
            log_not_found off;
            access_log off;
            proxy_cache_valid 200 304 302 5d;
            proxy_cache_key '$host:$server_port$request_uri';
            add_header X-Cache '$upstream_cache_status from $host';
            # 所有静态文件直接读取硬盘
            root /usr/share/nginx/html;
            # 缓存30天
            expires 30d;
        }

        location ~ .*\.(js|css)?$
        {
            proxy_cache_valid 200 304 302 5d;
            proxy_cache_key '$host:$server_port$request_uri';
            add_header X-Cache '$upstream_cache_status from $host';
            # 所有静态文件直接读取硬盘
            root /usr/share/nginx/html;
            expires      12h;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}